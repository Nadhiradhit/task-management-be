// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id          String      @id @unique @db.VarChar(12)
  name        String?
  email       String      @unique
  password    String
  token       String?
  is_active   Boolean     @default(true)
  role        Role        @default(USER)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relation
  boards      board[]     @relation("UserBoards")
  boarduser boarduser[]
}

enum Role {
  USER
  ADMIN
}

model board {
  id          String      @id @unique @db.VarChar(12)
  name        String
  created_by   String
  user        user        @relation("UserBoards", fields: [created_by], references: [id], onDelete: Cascade)
  is_public   Boolean
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relation
  boarduser boarduser[]
}

model boarduser {
  user_id     String    @db.VarChar(12)
  board_id    String    @db.VarChar(12)

  // Relation
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  board       board     @relation(fields: [board_id], references: [id], onDelete: Cascade)

  @@unique([user_id, board_id])
}

enum ColumnStatus {
  TODO
  IN_PROGRESS
  DONE
}

model column {
  id          String      @id @unique @db.VarChar(12)
  board_id    String      @db.VarChar(12)
  name        String
  order       ColumnStatus   @default(TODO)

  // Relation
  task        task[]
}

model task {
  id          String      @id @unique @db.VarChar(12)
  column_id   String      @db.VarChar(12)
  title       String
  description String
  assigned_to String

  // Relation
  column      column      @relation(fields: [column_id], references: [id], onDelete: Cascade)
}

